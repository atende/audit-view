{
    "docs": [
        {
            "location": "/", 
            "text": "About\n\n\nThis project is a view for logs in relational databases. The logs are collected by the \naudit-mq-collector\n project, and\ngenerated by any number of applications in a distributed async way.\n\n\nSee \nProject Home\n for more details\n\n\nDevelopment and Production\n\n\nTo develop the application you will need preparation for the environment, this preparation is like what is used\nin production, but in production you will be doing that different (perhaps env variables).\n\n\nWe need 3 things:\n\n\n\n\nConfigure the database in application-dev.properties\n\n\nCreate and configure the login file in \nkeycloak\n server\n\n\nInstall Bower Dependencies\n\n\n\n\nThis application has spring security but it do not authenticate the users. It delegates to the single sign on server\n\nkeycloak\n\n\nI assume you understand what that means, and way is awesome. If not, don't worry, go to the \nkeycloak\n\nsite and learn it.\n\n\n\n\n\nImportant note!\n Spring is programmed to let only users with a \nAUDIT_VIEW_ACCESS\n authority to access\nthis application. That means you need to create that role on keycloak and assign to a user, you can assign a role to\nanother role by using\n\nrole composition\n\nin keycloak server. That adds the flexibility needed\n\n\n\n\n\nConfigure the database\n\n\nCreate a \nsrv/main/resources/application-dev.properties\n file. There is a \napplication-dev.properties.dist\n as example\n in the same folder.\n A \n.dist\n file is a pattern for distribution, do not edit that unless you wanna change the example, this is a common\n mistake, you need to copy the file because it is different for every single developer machine, because of that,\n this file is configured to be ignored by git.\n\n\nSee \nconfiguration.md\n for details\n\n\nConfigure the login file\n\n\nIn the keycloak server, you need to create a client application.\n\n\nDownload the file, and put in \nsrv/main/resource/keycloak-dev.json\n. Note that the location of this file is configured\nin the \napplication-dev.properties\n file, and there is a example in the same folder\n\n\nIn production you probably wanna change that dynamically with env variables.\n\n\nInstall bower dependencies\n\n\nThe web files are located in \nsrv/main/webapp\n you need NodeJS installed and the bower package manage installed by\n\nnpm\n as a global command. The procedure is to go to the folder in the command line and run \nbower install\n\n\nThere is, however a gradle command to do that, and the gradle try to install dependencies in the build. That way\n \ngradle build\n is everything you need for a production \njar\n\n\nInstalling the dependencies:\n\n\n npm install -g bower\n cd src/main/webapp\n bower install\n\n\n\nOr with gradle\n\n\nnpm install -g bower\n./gradlew bowerInstall\n\n\n\nYou can run the application, the default environment is the \ndev\n environment. I recomend to change that in production\nusing the flag \n--spring.profiles.active=prod\n\n\nSee \nconfiguration\n for options on how to config the application", 
            "title": "Home"
        }, 
        {
            "location": "/#about", 
            "text": "This project is a view for logs in relational databases. The logs are collected by the  audit-mq-collector  project, and\ngenerated by any number of applications in a distributed async way.  See  Project Home  for more details", 
            "title": "About"
        }, 
        {
            "location": "/#development-and-production", 
            "text": "To develop the application you will need preparation for the environment, this preparation is like what is used\nin production, but in production you will be doing that different (perhaps env variables).  We need 3 things:   Configure the database in application-dev.properties  Create and configure the login file in  keycloak  server  Install Bower Dependencies   This application has spring security but it do not authenticate the users. It delegates to the single sign on server keycloak  I assume you understand what that means, and way is awesome. If not, don't worry, go to the  keycloak \nsite and learn it.   Important note!  Spring is programmed to let only users with a  AUDIT_VIEW_ACCESS  authority to access\nthis application. That means you need to create that role on keycloak and assign to a user, you can assign a role to\nanother role by using role composition \nin keycloak server. That adds the flexibility needed", 
            "title": "Development and Production"
        }, 
        {
            "location": "/#configure-the-database", 
            "text": "Create a  srv/main/resources/application-dev.properties  file. There is a  application-dev.properties.dist  as example\n in the same folder.\n A  .dist  file is a pattern for distribution, do not edit that unless you wanna change the example, this is a common\n mistake, you need to copy the file because it is different for every single developer machine, because of that,\n this file is configured to be ignored by git.  See  configuration.md  for details", 
            "title": "Configure the database"
        }, 
        {
            "location": "/#configure-the-login-file", 
            "text": "In the keycloak server, you need to create a client application.  Download the file, and put in  srv/main/resource/keycloak-dev.json . Note that the location of this file is configured\nin the  application-dev.properties  file, and there is a example in the same folder  In production you probably wanna change that dynamically with env variables.", 
            "title": "Configure the login file"
        }, 
        {
            "location": "/#install-bower-dependencies", 
            "text": "The web files are located in  srv/main/webapp  you need NodeJS installed and the bower package manage installed by npm  as a global command. The procedure is to go to the folder in the command line and run  bower install  There is, however a gradle command to do that, and the gradle try to install dependencies in the build. That way\n  gradle build  is everything you need for a production  jar  Installing the dependencies:   npm install -g bower\n cd src/main/webapp\n bower install  Or with gradle  npm install -g bower\n./gradlew bowerInstall  You can run the application, the default environment is the  dev  environment. I recomend to change that in production\nusing the flag  --spring.profiles.active=prod  See  configuration  for options on how to config the application", 
            "title": "Install bower dependencies"
        }, 
        {
            "location": "/configuration/", 
            "text": "App configuration\n\n\nThe application can be configure using spring boot configuration properties\n\n\nhttp://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html\n\n\nThat mean you can use startup params like in: \njava -jar application.jar --spring.datasource.username=bla\n or environment\nvariables like \nexport SPRING_DATASOURCE_USERNAME=bla\n\n\nDatabase\n\n\nspring.datasource.username=bla\nspring.datasource.password=xyz\nspring.datasource.jdbc-url=jdbc:postgres://localhost/audit\nspring.datasource.driver-class-name=org.postgresql.Driver # defautls to org.postgresql.Driver\nspring.datasource.maximumPoolSize=5 # defaults to 5\nspring.datasource.connection-timeout=5000 # defaults to 5000\n\n\n\nAs Environment Variables\n\n\nexport SPRING_DATASOURCE_USERNAME=bla\nexport SPRING_DATASOURCE_PASSWORD=xyz\nexport SPRING_DATASOURCE_JDBC_URL=jdbc:postgres://localhost/audit\nexport SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver # defautls to org.postgresql.Driver\nexport SPRING_DATASOURCE_MAXIMUM_POOL_SIZE=5 # defaults to 5\nexport SPRING_DATASOURCE_CONNECTION_TIMEOUT=5000 # defaults to 5000\n\n\n\nAuthetication\n\n\nkeycloak.configurationFile=file:///location/of/keycloak.json\n\n\n\nAs environment variable\n\n\nexport KEYCLOAK_CONFIGURATIONFILE=file:///localhost/of/keycloak.json", 
            "title": "Configuration"
        }, 
        {
            "location": "/configuration/#app-configuration", 
            "text": "The application can be configure using spring boot configuration properties  http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html  That mean you can use startup params like in:  java -jar application.jar --spring.datasource.username=bla  or environment\nvariables like  export SPRING_DATASOURCE_USERNAME=bla", 
            "title": "App configuration"
        }, 
        {
            "location": "/configuration/#database", 
            "text": "spring.datasource.username=bla\nspring.datasource.password=xyz\nspring.datasource.jdbc-url=jdbc:postgres://localhost/audit\nspring.datasource.driver-class-name=org.postgresql.Driver # defautls to org.postgresql.Driver\nspring.datasource.maximumPoolSize=5 # defaults to 5\nspring.datasource.connection-timeout=5000 # defaults to 5000  As Environment Variables  export SPRING_DATASOURCE_USERNAME=bla\nexport SPRING_DATASOURCE_PASSWORD=xyz\nexport SPRING_DATASOURCE_JDBC_URL=jdbc:postgres://localhost/audit\nexport SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver # defautls to org.postgresql.Driver\nexport SPRING_DATASOURCE_MAXIMUM_POOL_SIZE=5 # defaults to 5\nexport SPRING_DATASOURCE_CONNECTION_TIMEOUT=5000 # defaults to 5000", 
            "title": "Database"
        }, 
        {
            "location": "/configuration/#authetication", 
            "text": "keycloak.configurationFile=file:///location/of/keycloak.json  As environment variable  export KEYCLOAK_CONFIGURATIONFILE=file:///localhost/of/keycloak.json", 
            "title": "Authetication"
        }
    ]
}